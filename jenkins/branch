#!/usr/bin/env groovy
// Build the current branch into any of the supported platforms

// Global variables
def oses = ['osx', 'win', 'rh6', 'rh7']
def archs = ['x86_64', 'x86']
def configurations = []
def builders = [:]
def jobBuilds = [:]
def activeBuilders = [:]
def jobName = 'Buildsystem/okonomiyaki/test'
def repoUrl = 'https://github.com/enthought/okonomiyaki/'

// Prepare parameters and builders
// NOTE: we need to define local variables because we are creating a closure
for (x in oses) {
    def os = x
    for (z in archs) {
	def arch = z
	def key = os + '-'  + arch

	// There are no 32bit runtimes for osx and rh6
	if (os == 'osx' && arch == 'x86') continue
	if (os == 'rh6' && arch == 'x86') continue
	if (os == 'rh7' && arch == 'x86') continue

	// Add configuration parameters
	configurations.add(booleanParam(defaultValue: true, name: key))

	// Create the builder closure
	builders[key] = {
	    // Reset the github status
            githubNotify(
                [
                    status: 'PENDING',
                    description: 'Jenkins build starting',
                    account: 'enthought',
                    context: 'jenkins/' + key,
                    credentialsId: 'okonomiyaki-github-credentials',
                    sha: "${params.commit}",
                    repo: 'okonomiyaki'
                ]
            )
	    // run test build
	    def jobBuild = build(
		[
		    job: "${params.job_name}",
		    parameters:
		        [
			    string(name: 'commit', value: "${params.commit}"),
			    string(name: 'builder', value: os + ' && 64bit'),
			    string(name: 'name', value: key)
		        ],
		    wait: true,
	            propagate: false
	        ]
	    )
	    jobBuilds[key] = jobBuild
	}
    }
}


// Workflow
node('master'){

    stage('bootstrap') {
	// Setup build properties
	properties(
	    [
		parameters(
 		    configurations + [
		        string(defaultValue: "${CHANGE_BRANCH}", name: 'commit'),
			string(name: 'job_name', defaultValue: jobName)
		    ]
		),
		buildDiscarder(
		    [
			$class: 'EnhancedOldBuildDiscarder',
			artifactDaysToKeepStr: '',
			artifactNumToKeepStr: '',
			daysToKeepStr: '',
			discardOnlyOnSuccess: false,
			numToKeepStr: '3'
		    ]
		),
		disableResume(),
		[
		    $class: 'GithubProjectProperty',
		    displayName: '',
		    projectUrlStr: repoUrl
		],
		[
		    $class: 'RebuildSettings',
		    autoRebuild: false,
		    rebuildDisabled: false
		],
		pipelineTriggers(
		    [
			pollSCM(
			    ignorePostCommitHooks: true,
			    scmpoll_spec: 'H/3 * * * *'
			)
		    ]
		)
	    ]
	)
	for(entry in params) {
	    if (builders.containsKey(entry.key) && entry.value) {
		activeBuilders[entry.key] = builders[entry.key]
	    }
	}
    }

    stage('build') {
	if (activeBuilders.size() == 0) {
	    error('No builds have been selected')
	}
	parallel activeBuilders
    }

    stage('post-mortem') {
	def succeful = []
	for(entry in jobBuilds) {
	    def name = entry.key
	    def result = entry.value.getResult()
	    if (activeBuilders.containsKey(name) && result == 'SUCCESS') {
		succeful.add(entry.value.getNumber().toString())
	    }
	    echo "${name} -> ${result}"
	}
	echo "Succeful builds ${succeful}"
	if (succeful.size() == 0) {
	    error('All builds failed')
	}
	if (succeful.size() != activeBuilders.size()) {
	    echo 'Some builds failed'
	    currentBuild.result = 'UNSTABLE'
	}
    }

}

def execute(command) {
    if (isUnix()) {
       sh command
    } else {
       def cleaned = command.replace('\'','\"')
       bat cleaned
    }
}
